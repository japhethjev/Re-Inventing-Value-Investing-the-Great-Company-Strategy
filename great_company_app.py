{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "226bd5a4-dc4a-412b-b01f-14d6ddda4f2c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: streamlit in c:\\users\\cg\\anaconda3\\lib\\site-packages (1.45.1)Note: you may need to restart the kernel to use updated packages.\n",
      "\n",
      "Requirement already satisfied: yfinance in c:\\users\\cg\\anaconda3\\lib\\site-packages (0.2.65)\n",
      "Requirement already satisfied: pandas in c:\\users\\cg\\anaconda3\\lib\\site-packages (2.2.3)\n",
      "Requirement already satisfied: numpy in c:\\users\\cg\\anaconda3\\lib\\site-packages (2.1.3)\n",
      "Requirement already satisfied: matplotlib in c:\\users\\cg\\anaconda3\\lib\\site-packages (3.10.0)\n",
      "Requirement already satisfied: altair<6,>=4.0 in c:\\users\\cg\\anaconda3\\lib\\site-packages (from streamlit) (5.5.0)\n",
      "Requirement already satisfied: blinker<2,>=1.5.0 in c:\\users\\cg\\anaconda3\\lib\\site-packages (from streamlit) (1.9.0)\n",
      "Requirement already satisfied: cachetools<6,>=4.0 in c:\\users\\cg\\anaconda3\\lib\\site-packages (from streamlit) (5.5.1)\n",
      "Requirement already satisfied: click<9,>=7.0 in c:\\users\\cg\\anaconda3\\lib\\site-packages (from streamlit) (8.1.8)\n",
      "Requirement already satisfied: packaging<25,>=20 in c:\\users\\cg\\anaconda3\\lib\\site-packages (from streamlit) (24.2)\n",
      "Requirement already satisfied: pillow<12,>=7.1.0 in c:\\users\\cg\\anaconda3\\lib\\site-packages (from streamlit) (11.1.0)\n",
      "Requirement already satisfied: protobuf<7,>=3.20 in c:\\users\\cg\\anaconda3\\lib\\site-packages (from streamlit) (5.29.3)\n",
      "Requirement already satisfied: pyarrow>=7.0 in c:\\users\\cg\\anaconda3\\lib\\site-packages (from streamlit) (19.0.0)\n",
      "Requirement already satisfied: requests<3,>=2.27 in c:\\users\\cg\\anaconda3\\lib\\site-packages (from streamlit) (2.32.3)\n",
      "Requirement already satisfied: tenacity<10,>=8.1.0 in c:\\users\\cg\\anaconda3\\lib\\site-packages (from streamlit) (9.0.0)\n",
      "Requirement already satisfied: toml<2,>=0.10.1 in c:\\users\\cg\\anaconda3\\lib\\site-packages (from streamlit) (0.10.2)\n",
      "Requirement already satisfied: typing-extensions<5,>=4.4.0 in c:\\users\\cg\\anaconda3\\lib\\site-packages (from streamlit) (4.12.2)\n",
      "Requirement already satisfied: watchdog<7,>=2.1.5 in c:\\users\\cg\\anaconda3\\lib\\site-packages (from streamlit) (4.0.2)\n",
      "Requirement already satisfied: gitpython!=3.1.19,<4,>=3.0.7 in c:\\users\\cg\\anaconda3\\lib\\site-packages (from streamlit) (3.1.43)\n",
      "Requirement already satisfied: tornado<7,>=6.0.3 in c:\\users\\cg\\anaconda3\\lib\\site-packages (from streamlit) (6.5.1)\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in c:\\users\\cg\\anaconda3\\lib\\site-packages (from pandas) (2.9.0.post0)\n",
      "Requirement already satisfied: pytz>=2020.1 in c:\\users\\cg\\anaconda3\\lib\\site-packages (from pandas) (2024.1)\n",
      "Requirement already satisfied: tzdata>=2022.7 in c:\\users\\cg\\anaconda3\\lib\\site-packages (from pandas) (2025.2)\n",
      "Requirement already satisfied: jinja2 in c:\\users\\cg\\anaconda3\\lib\\site-packages (from altair<6,>=4.0->streamlit) (3.1.6)\n",
      "Requirement already satisfied: jsonschema>=3.0 in c:\\users\\cg\\anaconda3\\lib\\site-packages (from altair<6,>=4.0->streamlit) (4.23.0)\n",
      "Requirement already satisfied: narwhals>=1.14.2 in c:\\users\\cg\\anaconda3\\lib\\site-packages (from altair<6,>=4.0->streamlit) (1.31.0)\n",
      "Requirement already satisfied: colorama in c:\\users\\cg\\anaconda3\\lib\\site-packages (from click<9,>=7.0->streamlit) (0.4.6)\n",
      "Requirement already satisfied: gitdb<5,>=4.0.1 in c:\\users\\cg\\anaconda3\\lib\\site-packages (from gitpython!=3.1.19,<4,>=3.0.7->streamlit) (4.0.7)\n",
      "Requirement already satisfied: smmap<5,>=3.0.1 in c:\\users\\cg\\anaconda3\\lib\\site-packages (from gitdb<5,>=4.0.1->gitpython!=3.1.19,<4,>=3.0.7->streamlit) (4.0.0)\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in c:\\users\\cg\\anaconda3\\lib\\site-packages (from requests<3,>=2.27->streamlit) (3.3.2)\n",
      "Requirement already satisfied: idna<4,>=2.5 in c:\\users\\cg\\anaconda3\\lib\\site-packages (from requests<3,>=2.27->streamlit) (3.7)\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in c:\\users\\cg\\anaconda3\\lib\\site-packages (from requests<3,>=2.27->streamlit) (2.3.0)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in c:\\users\\cg\\anaconda3\\lib\\site-packages (from requests<3,>=2.27->streamlit) (2025.6.15)\n",
      "Requirement already satisfied: multitasking>=0.0.7 in c:\\users\\cg\\anaconda3\\lib\\site-packages (from yfinance) (0.0.11)\n",
      "Requirement already satisfied: platformdirs>=2.0.0 in c:\\users\\cg\\anaconda3\\lib\\site-packages (from yfinance) (4.3.7)\n",
      "Requirement already satisfied: frozendict>=2.3.4 in c:\\users\\cg\\anaconda3\\lib\\site-packages (from yfinance) (2.4.2)\n",
      "Requirement already satisfied: peewee>=3.16.2 in c:\\users\\cg\\anaconda3\\lib\\site-packages (from yfinance) (3.18.2)\n",
      "Requirement already satisfied: beautifulsoup4>=4.11.1 in c:\\users\\cg\\anaconda3\\lib\\site-packages (from yfinance) (4.12.3)\n",
      "Requirement already satisfied: curl_cffi>=0.7 in c:\\users\\cg\\anaconda3\\lib\\site-packages (from yfinance) (0.12.0)\n",
      "Requirement already satisfied: websockets>=13.0 in c:\\users\\cg\\anaconda3\\lib\\site-packages (from yfinance) (15.0.1)\n",
      "Requirement already satisfied: contourpy>=1.0.1 in c:\\users\\cg\\anaconda3\\lib\\site-packages (from matplotlib) (1.3.1)\n",
      "Requirement already satisfied: cycler>=0.10 in c:\\users\\cg\\anaconda3\\lib\\site-packages (from matplotlib) (0.11.0)\n",
      "Requirement already satisfied: fonttools>=4.22.0 in c:\\users\\cg\\anaconda3\\lib\\site-packages (from matplotlib) (4.55.3)\n",
      "Requirement already satisfied: kiwisolver>=1.3.1 in c:\\users\\cg\\anaconda3\\lib\\site-packages (from matplotlib) (1.4.8)\n",
      "Requirement already satisfied: pyparsing>=2.3.1 in c:\\users\\cg\\anaconda3\\lib\\site-packages (from matplotlib) (3.2.0)\n",
      "Requirement already satisfied: soupsieve>1.2 in c:\\users\\cg\\anaconda3\\lib\\site-packages (from beautifulsoup4>=4.11.1->yfinance) (2.5)\n",
      "Requirement already satisfied: cffi>=1.12.0 in c:\\users\\cg\\anaconda3\\lib\\site-packages (from curl_cffi>=0.7->yfinance) (1.17.1)\n",
      "Requirement already satisfied: pycparser in c:\\users\\cg\\anaconda3\\lib\\site-packages (from cffi>=1.12.0->curl_cffi>=0.7->yfinance) (2.21)\n",
      "Requirement already satisfied: attrs>=22.2.0 in c:\\users\\cg\\anaconda3\\lib\\site-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (24.3.0)\n",
      "Requirement already satisfied: jsonschema-specifications>=2023.03.6 in c:\\users\\cg\\anaconda3\\lib\\site-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (2023.7.1)\n",
      "Requirement already satisfied: referencing>=0.28.4 in c:\\users\\cg\\anaconda3\\lib\\site-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.30.2)\n",
      "Requirement already satisfied: rpds-py>=0.7.1 in c:\\users\\cg\\anaconda3\\lib\\site-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.22.3)\n",
      "Requirement already satisfied: six>=1.5 in c:\\users\\cg\\anaconda3\\lib\\site-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n",
      "Requirement already satisfied: MarkupSafe>=2.0 in c:\\users\\cg\\anaconda3\\lib\\site-packages (from jinja2->altair<6,>=4.0->streamlit) (3.0.2)\n"
     ]
    }
   ],
   "source": [
    "pip install streamlit yfinance pandas numpy matplotlib\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "7ceefc63-c2b9-4fa3-9781-5d84e18c3663",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-07-14 00:40:40.640 WARNING streamlit.runtime.scriptrunner_utils.script_run_context: Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-14 00:40:40.642 WARNING streamlit.runtime.scriptrunner_utils.script_run_context: Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-14 00:40:42.217 \n",
      "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
      "  command:\n",
      "\n",
      "    streamlit run C:\\Users\\CG\\anaconda3\\Lib\\site-packages\\ipykernel_launcher.py [ARGUMENTS]\n",
      "2025-07-14 00:40:42.218 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-14 00:40:42.219 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-14 00:40:42.223 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-14 00:40:42.225 No runtime found, using MemoryCacheStorageManager\n",
      "2025-07-14 00:40:42.229 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-14 00:40:42.231 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-14 00:40:42.233 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-14 00:40:42.234 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-14 00:40:42.235 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-14 00:40:42.238 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-14 00:40:42.239 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-14 00:40:42.241 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-14 00:40:42.243 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-14 00:40:42.244 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-14 00:40:42.246 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-14 00:40:42.250 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-14 00:40:42.252 No runtime found, using MemoryCacheStorageManager\n",
      "2025-07-14 00:40:42.261 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-14 00:40:42.263 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-14 00:40:42.269 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-14 00:40:42.783 Thread 'Thread-5': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-14 00:40:42.789 Thread 'Thread-5': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-14 00:40:43.725 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-14 00:40:43.726 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "C:\\Users\\CG\\AppData\\Local\\Temp\\ipykernel_25352\\3644115063.py:38: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  price = tk.history(period=\"1d\")[\"Close\"][-1]\n",
      "C:\\Users\\CG\\AppData\\Local\\Temp\\ipykernel_25352\\3644115063.py:38: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  price = tk.history(period=\"1d\")[\"Close\"][-1]\n",
      "C:\\Users\\CG\\AppData\\Local\\Temp\\ipykernel_25352\\3644115063.py:38: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  price = tk.history(period=\"1d\")[\"Close\"][-1]\n",
      "C:\\Users\\CG\\AppData\\Local\\Temp\\ipykernel_25352\\3644115063.py:38: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  price = tk.history(period=\"1d\")[\"Close\"][-1]\n",
      "C:\\Users\\CG\\AppData\\Local\\Temp\\ipykernel_25352\\3644115063.py:38: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  price = tk.history(period=\"1d\")[\"Close\"][-1]\n",
      "C:\\Users\\CG\\AppData\\Local\\Temp\\ipykernel_25352\\3644115063.py:38: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  price = tk.history(period=\"1d\")[\"Close\"][-1]\n",
      "C:\\Users\\CG\\AppData\\Local\\Temp\\ipykernel_25352\\3644115063.py:38: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  price = tk.history(period=\"1d\")[\"Close\"][-1]\n",
      "C:\\Users\\CG\\AppData\\Local\\Temp\\ipykernel_25352\\3644115063.py:38: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  price = tk.history(period=\"1d\")[\"Close\"][-1]\n",
      "C:\\Users\\CG\\AppData\\Local\\Temp\\ipykernel_25352\\3644115063.py:38: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  price = tk.history(period=\"1d\")[\"Close\"][-1]\n",
      "C:\\Users\\CG\\AppData\\Local\\Temp\\ipykernel_25352\\3644115063.py:38: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  price = tk.history(period=\"1d\")[\"Close\"][-1]\n",
      "C:\\Users\\CG\\AppData\\Local\\Temp\\ipykernel_25352\\3644115063.py:38: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  price = tk.history(period=\"1d\")[\"Close\"][-1]\n",
      "C:\\Users\\CG\\AppData\\Local\\Temp\\ipykernel_25352\\3644115063.py:38: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  price = tk.history(period=\"1d\")[\"Close\"][-1]\n",
      "C:\\Users\\CG\\AppData\\Local\\Temp\\ipykernel_25352\\3644115063.py:38: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  price = tk.history(period=\"1d\")[\"Close\"][-1]\n",
      "C:\\Users\\CG\\AppData\\Local\\Temp\\ipykernel_25352\\3644115063.py:38: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  price = tk.history(period=\"1d\")[\"Close\"][-1]\n",
      "C:\\Users\\CG\\AppData\\Local\\Temp\\ipykernel_25352\\3644115063.py:38: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  price = tk.history(period=\"1d\")[\"Close\"][-1]\n",
      "C:\\Users\\CG\\AppData\\Local\\Temp\\ipykernel_25352\\3644115063.py:38: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  price = tk.history(period=\"1d\")[\"Close\"][-1]\n",
      "C:\\Users\\CG\\AppData\\Local\\Temp\\ipykernel_25352\\3644115063.py:38: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  price = tk.history(period=\"1d\")[\"Close\"][-1]\n",
      "C:\\Users\\CG\\AppData\\Local\\Temp\\ipykernel_25352\\3644115063.py:38: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  price = tk.history(period=\"1d\")[\"Close\"][-1]\n",
      "C:\\Users\\CG\\AppData\\Local\\Temp\\ipykernel_25352\\3644115063.py:38: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  price = tk.history(period=\"1d\")[\"Close\"][-1]\n",
      "C:\\Users\\CG\\AppData\\Local\\Temp\\ipykernel_25352\\3644115063.py:38: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  price = tk.history(period=\"1d\")[\"Close\"][-1]\n",
      "C:\\Users\\CG\\AppData\\Local\\Temp\\ipykernel_25352\\3644115063.py:38: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  price = tk.history(period=\"1d\")[\"Close\"][-1]\n",
      "C:\\Users\\CG\\AppData\\Local\\Temp\\ipykernel_25352\\3644115063.py:38: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  price = tk.history(period=\"1d\")[\"Close\"][-1]\n",
      "C:\\Users\\CG\\AppData\\Local\\Temp\\ipykernel_25352\\3644115063.py:38: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  price = tk.history(period=\"1d\")[\"Close\"][-1]\n",
      "C:\\Users\\CG\\AppData\\Local\\Temp\\ipykernel_25352\\3644115063.py:38: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  price = tk.history(period=\"1d\")[\"Close\"][-1]\n",
      "C:\\Users\\CG\\AppData\\Local\\Temp\\ipykernel_25352\\3644115063.py:38: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  price = tk.history(period=\"1d\")[\"Close\"][-1]\n",
      "C:\\Users\\CG\\AppData\\Local\\Temp\\ipykernel_25352\\3644115063.py:38: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  price = tk.history(period=\"1d\")[\"Close\"][-1]\n",
      "C:\\Users\\CG\\AppData\\Local\\Temp\\ipykernel_25352\\3644115063.py:38: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  price = tk.history(period=\"1d\")[\"Close\"][-1]\n",
      "C:\\Users\\CG\\AppData\\Local\\Temp\\ipykernel_25352\\3644115063.py:38: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  price = tk.history(period=\"1d\")[\"Close\"][-1]\n",
      "C:\\Users\\CG\\AppData\\Local\\Temp\\ipykernel_25352\\3644115063.py:38: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  price = tk.history(period=\"1d\")[\"Close\"][-1]\n",
      "C:\\Users\\CG\\AppData\\Local\\Temp\\ipykernel_25352\\3644115063.py:38: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  price = tk.history(period=\"1d\")[\"Close\"][-1]\n",
      "C:\\Users\\CG\\AppData\\Local\\Temp\\ipykernel_25352\\3644115063.py:38: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  price = tk.history(period=\"1d\")[\"Close\"][-1]\n",
      "C:\\Users\\CG\\AppData\\Local\\Temp\\ipykernel_25352\\3644115063.py:38: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  price = tk.history(period=\"1d\")[\"Close\"][-1]\n",
      "C:\\Users\\CG\\AppData\\Local\\Temp\\ipykernel_25352\\3644115063.py:38: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  price = tk.history(period=\"1d\")[\"Close\"][-1]\n",
      "C:\\Users\\CG\\AppData\\Local\\Temp\\ipykernel_25352\\3644115063.py:38: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  price = tk.history(period=\"1d\")[\"Close\"][-1]\n",
      "C:\\Users\\CG\\AppData\\Local\\Temp\\ipykernel_25352\\3644115063.py:38: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  price = tk.history(period=\"1d\")[\"Close\"][-1]\n",
      "C:\\Users\\CG\\AppData\\Local\\Temp\\ipykernel_25352\\3644115063.py:38: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  price = tk.history(period=\"1d\")[\"Close\"][-1]\n",
      "C:\\Users\\CG\\AppData\\Local\\Temp\\ipykernel_25352\\3644115063.py:38: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  price = tk.history(period=\"1d\")[\"Close\"][-1]\n",
      "C:\\Users\\CG\\AppData\\Local\\Temp\\ipykernel_25352\\3644115063.py:38: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  price = tk.history(period=\"1d\")[\"Close\"][-1]\n",
      "C:\\Users\\CG\\AppData\\Local\\Temp\\ipykernel_25352\\3644115063.py:38: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  price = tk.history(period=\"1d\")[\"Close\"][-1]\n",
      "C:\\Users\\CG\\AppData\\Local\\Temp\\ipykernel_25352\\3644115063.py:38: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  price = tk.history(period=\"1d\")[\"Close\"][-1]\n",
      "C:\\Users\\CG\\AppData\\Local\\Temp\\ipykernel_25352\\3644115063.py:38: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  price = tk.history(period=\"1d\")[\"Close\"][-1]\n",
      "C:\\Users\\CG\\AppData\\Local\\Temp\\ipykernel_25352\\3644115063.py:38: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  price = tk.history(period=\"1d\")[\"Close\"][-1]\n",
      "C:\\Users\\CG\\AppData\\Local\\Temp\\ipykernel_25352\\3644115063.py:38: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  price = tk.history(period=\"1d\")[\"Close\"][-1]\n",
      "C:\\Users\\CG\\AppData\\Local\\Temp\\ipykernel_25352\\3644115063.py:38: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  price = tk.history(period=\"1d\")[\"Close\"][-1]\n",
      "C:\\Users\\CG\\AppData\\Local\\Temp\\ipykernel_25352\\3644115063.py:38: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  price = tk.history(period=\"1d\")[\"Close\"][-1]\n",
      "2025-07-14 00:41:24.628 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-14 00:41:24.630 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "C:\\Users\\CG\\AppData\\Local\\Temp\\ipykernel_25352\\3644115063.py:38: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  price = tk.history(period=\"1d\")[\"Close\"][-1]\n",
      "C:\\Users\\CG\\AppData\\Local\\Temp\\ipykernel_25352\\3644115063.py:38: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  price = tk.history(period=\"1d\")[\"Close\"][-1]\n",
      "C:\\Users\\CG\\AppData\\Local\\Temp\\ipykernel_25352\\3644115063.py:38: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  price = tk.history(period=\"1d\")[\"Close\"][-1]\n",
      "C:\\Users\\CG\\AppData\\Local\\Temp\\ipykernel_25352\\3644115063.py:38: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  price = tk.history(period=\"1d\")[\"Close\"][-1]\n",
      "2025-07-14 00:41:28.238 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-14 00:41:28.239 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-14 00:41:28.304 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-14 00:41:28.306 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-14 00:41:28.543 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-14 00:41:29.147 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-14 00:41:29.148 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-14 00:41:29.160 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-14 00:41:29.161 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-14 00:41:29.161 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-14 00:41:29.164 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-14 00:41:29.165 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-14 00:41:29.167 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# great_company_app.py\n",
    "\n",
    "import streamlit as st\n",
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "st.set_page_config(page_title=\"Great Company Screener\", layout=\"wide\")\n",
    "\n",
    "st.title(\"📈 Great Company Strategy – S&P 500 Screener\")\n",
    "st.markdown(\"Screen for high-quality S&P 500 stocks based on strict fundamentals.\")\n",
    "\n",
    "# --- Helper function ---\n",
    "@st.cache_data\n",
    "def get_sp500_tickers():\n",
    "    sp500_df = pd.read_html(\"https://en.wikipedia.org/wiki/List_of_S%26P_500_companies\")[0]\n",
    "    return sp500_df[\"Symbol\"].str.replace(\".\", \"-\", regex=False).tolist()\n",
    "\n",
    "def grab_fundamentals(ticker: str):\n",
    "    tk = yf.Ticker(ticker)\n",
    "    try:\n",
    "        is_ = tk.get_income_stmt(freq=\"trailing\").iloc[:, 0]\n",
    "    except:\n",
    "        is_ = (getattr(tk, \"ttm_income_stmt\", tk.income_stmt)).iloc[:, 0]\n",
    "\n",
    "    try:\n",
    "        bs_ = tk.get_balance_sheet(freq=\"yearly\").iloc[:, 0]\n",
    "    except:\n",
    "        bs_ = tk.balance_sheet.iloc[:, 0]\n",
    "\n",
    "    try:\n",
    "        cf_ = tk.get_cashflow(freq=\"trailing\").iloc[:, 0]\n",
    "    except:\n",
    "        cf_ = (getattr(tk, \"ttm_cashflow\", tk.cashflow)).iloc[:, 0]\n",
    "\n",
    "    info = tk.info\n",
    "    price = tk.history(period=\"1d\")[\"Close\"][-1]\n",
    "\n",
    "    equity = bs_.get(\"TotalStockholderEquity\") or bs_.get(\"CommonStockholderEquity\") or bs_.get(\"TotalEquityGrossMinorityInterest\") or np.nan\n",
    "    total_debt = bs_.get(\"TotalDebt\") or bs_.get(\"LongTermDebt\") or np.nan\n",
    "    cash_eq = bs_.get(\"CashAndCashEquivalents\") or 0\n",
    "\n",
    "    net_income = is_.get(\"NetIncome\")\n",
    "    shares_out = info.get(\"sharesOutstanding\")\n",
    "    gross_profit = is_.get(\"GrossProfit\")\n",
    "    revenue = is_.get(\"TotalRevenue\")\n",
    "    ebitda = cf_.get(\"Ebitda\") or is_.get(\"EBITDA\")\n",
    "    mcap = info.get(\"marketCap\")\n",
    "    enterprise_value = (mcap or 0) + (total_debt or 0) - (cash_eq or 0)\n",
    "    sector = info.get(\"sector\", \"Unknown\")\n",
    "\n",
    "    return pd.Series({\n",
    "        \"rev\": revenue,\n",
    "        \"gross\": gross_profit,\n",
    "        \"ebitda\": ebitda,\n",
    "        \"net_inc\": net_income,\n",
    "        \"equity\": equity,\n",
    "        \"shares\": shares_out,\n",
    "        \"price\": price,\n",
    "        \"mcap\": mcap,\n",
    "        \"ev\": enterprise_value,\n",
    "        \"total_debt\": total_debt,\n",
    "        \"sector\": sector\n",
    "    })\n",
    "\n",
    "# --- Sidebar ---\n",
    "st.sidebar.header(\"Settings\")\n",
    "num_stocks = st.sidebar.slider(\"Number of S&P 500 Stocks to Sample\", 10, 100, 50)\n",
    "show_chart = st.sidebar.checkbox(\"Show Bar Chart\", value=True)\n",
    "\n",
    "# --- Main logic ---\n",
    "sp_tickers = get_sp500_tickers()\n",
    "tickers_to_check = sp_tickers[:num_stocks]\n",
    "\n",
    "data = {}\n",
    "for t in tickers_to_check:\n",
    "    try:\n",
    "        data[t] = grab_fundamentals(t)\n",
    "    except Exception as e:\n",
    "        st.warning(f\"{t}: {e}\")\n",
    "\n",
    "funds = pd.DataFrame(data).T\n",
    "funds = funds.dropna(subset=[\"equity\", \"rev\", \"ebitda\", \"net_inc\", \"shares\"])\n",
    "funds[\"sector\"] = funds[\"sector\"].fillna(\"Unknown\")\n",
    "\n",
    "# --- Metrics ---\n",
    "funds[\"GP%\"]       = 100 * funds[\"gross\"]  / funds[\"rev\"]\n",
    "funds[\"EBITDA%\"]   = 100 * funds[\"ebitda\"] / funds[\"rev\"]\n",
    "funds[\"ROE%\"]      = 100 * funds[\"net_inc\"] / funds[\"equity\"]\n",
    "funds[\"PE\"]        = funds[\"price\"] / (funds[\"net_inc\"] / funds[\"shares\"])\n",
    "funds[\"EV/EBITDA\"] = funds[\"ev\"] / funds[\"ebitda\"]\n",
    "funds[\"D/E%\"]      = 100 * funds[\"total_debt\"] / funds[\"equity\"]\n",
    "\n",
    "# --- Sector means ---\n",
    "sector_means = funds.groupby(\"sector\")[[\"GP%\", \"EBITDA%\", \"ROE%\", \"PE\", \"EV/EBITDA\", \"D/E%\"]].transform(\"mean\")\n",
    "sector_means.columns = [f\"{col}_sector\" for col in sector_means]\n",
    "funds = pd.concat([funds, sector_means], axis=1)\n",
    "\n",
    "# --- Rules (STRICT) ---\n",
    "rules = {\n",
    "    \"rule1_GP\"    : (funds[\"GP%\"] >= 35) | (funds[\"GP%\"] >= funds[\"GP%_sector\"]),\n",
    "    \"rule2_EBITDA\": (funds[\"EBITDA%\"] >= 15) | (funds[\"EBITDA%\"] >= funds[\"EBITDA%_sector\"]),\n",
    "    \"rule3_ROE\"   : (funds[\"ROE%\"] > 0) & (funds[\"ROE%\"] >= 15) & (funds[\"ROE%\"] >= funds[\"ROE%_sector\"]),\n",
    "    \"rule4_PE\"    : (funds[\"PE\"] > 0) & (funds[\"PE\"] <= 20) & (funds[\"PE\"] <= funds[\"PE_sector\"]),\n",
    "    \"rule5_EVEBIT\": (funds[\"EV/EBITDA\"] > 0) & (funds[\"EV/EBITDA\"] <= 10) & (funds[\"EV/EBITDA\"] <= funds[\"EV/EBITDA_sector\"]),\n",
    "    \"rule6_DE\"    : (funds[\"D/E%\"] > 0) & (funds[\"D/E%\"] <= 50) & (funds[\"D/E%\"] <= funds[\"D/E%_sector\"]),\n",
    "}\n",
    "\n",
    "for k, v in rules.items():\n",
    "    funds[k] = v\n",
    "\n",
    "funds[\"Greatness_Score\"] = funds[[*rules]].sum(axis=1) / 6 * 100\n",
    "funds[\"Great_Company?\"] = np.where(funds[\"Greatness_Score\"] >= 80, \"YES\", \"NO\")\n",
    "\n",
    "# --- Results table ---\n",
    "st.subheader(\"📊 Great Company Rankings\")\n",
    "cols = [\"GP%\", \"EBITDA%\", \"ROE%\", \"PE\", \"EV/EBITDA\", \"D/E%\", \"Greatness_Score\", \"Great_Company?\"]\n",
    "st.dataframe(funds[cols].round(2).sort_values(\"Greatness_Score\", ascending=False))\n",
    "\n",
    "# --- Optional chart ---\n",
    "if show_chart:\n",
    "    top = funds.sort_values(\"Greatness_Score\", ascending=False).head(20)\n",
    "    fig, ax = plt.subplots(figsize=(10, 5))\n",
    "    bars = ax.bar(top.index, top[\"Greatness_Score\"], color=\"#2E8B57\")\n",
    "    for i, bar in enumerate(bars):\n",
    "        if top[\"Great_Company?\"].iloc[i] == \"YES\":\n",
    "            bar.set_color(\"#006400\")\n",
    "    ax.axhline(80, color=\"gray\", linestyle=\"--\", label=\"Greatness Threshold (80%)\")\n",
    "    ax.set_xticks(range(len(top.index)))\n",
    "    ax.set_xticklabels(top.index, rotation=45, ha=\"right\")\n",
    "    ax.set_ylabel(\"Greatness Score (%)\")\n",
    "    ax.set_title(\"Top 20 Companies by Greatness Score\")\n",
    "    ax.legend()\n",
    "    st.pyplot(fig)\n",
    "\n",
    "# --- CSV download ---\n",
    "csv = funds.to_csv().encode(\"utf-8\")\n",
    "st.download_button(\"📥 Download CSV\", data=csv, file_name=\"great_companies_screener.csv\", mime=\"text/csv\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "15a69811-3ab4-4f2c-87c4-4f8bc61c9b1e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

